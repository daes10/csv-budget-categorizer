import os


dir_path="./data/data.json"
os.path.dirname(dir_path)

class App:
    def __init__(self):
        self.eigenschaft1 = "test"
        self.eigenschaft2 = "test2"

        self.create_widgets() # Call the method to create widgets and initialize the properties
        # Initialize other classes
        self.helper = Helper(self) # Aufruf mit der App-Instanz
        self.helper2 = Helper2() # Aufruf ohne die App-Instanz
        self.helper3 = Helper3(self.eigene_Methode) # Aufruf mit nur einer Methode der App-Instanz

        print("Eigenschaft15: " + self.eigenschaft15)

        # Call the method of the Helper class
        self.helper.some_method() # Call the method of the Helper2 class without app instance, but instance of Helper2 was passed into it in the initializtion of Helper
        self.helper2.some_method(self) # Pass the app instance to Helper2's method
        self.helper3.some_method() # Call the method of the Helper3 class without app instance, but instance of Helper2 was passed into it in the initializtion of Helper3


    def eigene_Methode(self):
        print("Das ist eine eigene Methode der App-Klasse. eigene_Methode()")
        print(self.eigenschaft1)

        self.eigenschaft15 = "Hier werden KEINE Widgets erstellt"

    def Methode_fuer_Helper(self):
        print("Von Helper auf Methode_fuer_Helper() zugreifen.")
        # Hier können Sie auf die Eigenschaften der Helper-Klasse zugreifen
        # und deren Methoden aufrufen, wenn nötig.
        # Zum Beispiel:
        # helper.some_method()
        print(self.helper.some_property)
        self.helper.some_property = "neuer_wert"
        print(self.helper.some_property)

        print(self.helper2.some_property2)
        self.helper2.some_property2 = "neuer_wert ZWEI"
        print(self.helper2.some_property2)

        print(self.helper3.some_property3)
        self.helper3.some_property3 = "neuer_wert DREI"
        print(self.helper3.some_property3)


        self.helper.some_method() # Call the method of the Helper class again
    
    def create_widgets(self):
        # Hier können Sie Ihre Widgets erstellen
        self.eigenschaft15 = "Widgets erstellt"
        print("Widgets werden erstellt...")

        

class Helper:
    def __init__(self, app):
        self.some_property = "alter wert EINS"
        self.app = app  # Referenz zur App-Instanz setzen
        
        # Removing this call to avoid infinite recursion
        # self.some_method()  


    def some_method(self):
        print("Das ist eine Methode der Helper-Klasse 1.")
        # Hier können Sie auf die Eigenschaften der App-Klasse zugreifen
        # und deren Methoden aufrufen, wenn nötig.
        # Zum Beispiel:
        self.app.eigene_Methode()
        print(self.some_property)

        # Zugriff auf Variable der App-Klasse
        print("Helper1: self.app.eigenschaft15:" + self.app.eigenschaft15)

class Helper2:
    def __init__(self):
        self.some_property2 = "alter wert ZWEI"


    def some_method(self, app):
        print("Das ist eine Methode der Helper-Klasse 2.")
        # Hier können Sie auf die Eigenschaften der App-Klasse zugreifen
        app.Methode_fuer_Helper()
        print(self.some_property2)

        # Zugriff auf Variable der App-Klasse
        print("Helper2: app.eigenschaft15:" + app.eigenschaft15)


class Helper3:
    def __init__(self, method):
        self.some_property3 = "alter wert DREI"
        self.eigene_Methode = method  # Referenz zur Methode setzen von der App-Klasse
        
        # Removing this call to avoid infinite recursion
        # self.some_method()  

        # Zugriff auf Variable der App-Klasse
        self.eigene_Methode()

    def some_method(self):
        print("Das ist eine Methode der Helper-Klasse 3.")

        # Hier KEIN Zugriff auf App Variable Eigenschaft 15, da nur die Methode übergeben wurde

        print(self.some_property3)
        

# Beispielaufruf
app = App()
# app.Methode_fuer_Helper()